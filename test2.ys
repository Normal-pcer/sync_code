var n: int;
var m: int;
scan(n);
scan(m);

var i: int;
var init: array[int, 1..n];
for (i = 1; i <= n; i = i + 1) {
    scan(init[i]);
}

var size: int;
size = n << 2;
var begin: array[int, 1..size];
var end: array[int, 1..size];
var sum: array[int, 1..size];
var tag: array[int, 1..size];

def pushUp(p: int) {
    sum[p] = sum[p << 1] + sum[p << 1 | 1];
}

def pushDown(p: int) {
    if (tag[p]) {
        sum[p << 1] = sum[p << 1] + (end[p << 1] - begin[p << 1]) * tag[p];
        sum[p << 1 | 1] = sum[p << 1 | 1] + (end[p << 1 | 1] - begin[p << 1 | 1]) * tag[p];
        tag[p << 1] = tag[p << 1] + tag[p];
        tag[p << 1 | 1] = tag[p << 1 | 1] + tag[p];
        tag[p] = 0;
    }
}

def build(bg: int, ed: int, p: int) {
    begin[p] = bg;
    end[p] = ed;
    if (bg + 1 == ed) {
        sum[p] = init[bg];
        return;
    } else {
        var mid: int;
        mid = (bg + ed) >> 1;
        build(bg, mid, p << 1);
        build(mid, ed, p << 1 | 1);
    }
}

def query(bg: int, ed: int, p: int) {
    if (begin[p] >= bg && end[p] <= ed) {
        return sum[p];
    }
    pushDown(p);
    var res: int;
    res = 0;
    if (end[p << 1] > bg) { res = res + query(bg, ed, p << 1); }
    if (begin[p << 1 | 1] < ed) { res = res + query(bg, ed, p << 1 | 1); }
    return res;
}

def update(bg: int, ed: int, val: int, p: int) {
    if (begin[p] >= bg && end[p] <= ed) {
        sum[p] = sum[p] + val * (end[p] - begin[p]);
        tag[p] = tag[p] + val;
        return;
    }
    pushDown(p);
    if (end[p << 1] > bg) { update(bg, ed, val, p << 1); }
    if (begin[p << 1 | 1] < ed) { update(bg, ed, val, p << 1 | 1); }
    pushUp(p);
}

build(1, n+1, 1);

for (i = 0; i < m; i = i + 1) {
    var op: int;
    var x: int;
    var y: int;
    scan(op);
    scan(x);
    scan(y);
    if (op == 1) {
        var k: int;
        scan(k);
        update(x, y+1, k, 1);
    } else {
        print(query(x, y+1, 1));
        print("\n");
    }
}
