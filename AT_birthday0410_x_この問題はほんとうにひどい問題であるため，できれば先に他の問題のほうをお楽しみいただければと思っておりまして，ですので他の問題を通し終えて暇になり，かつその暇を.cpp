/**
 * @link https://www.luogu.com.cn/problem/AT_birthday0410_x
 */
#ifndef ONLINE_JUDGE
#define GNU_DEBUG
#define _GLIBCXX_DEBUG 1
#define _GLIBCXX_DEBUG_PEDANTIC 1
#define _GLIBCXX_SANITIZE_VECTOR 1
#endif
#include <bits/stdc++.h>
bool DEBUG_MODE = false;
#define debug if(DEBUG_MODE)
template <typename T> inline auto chkMax(T &base, const T &cmp) -> T & { return (base = std::max(base, cmp)); }
template <typename T> inline auto chkMin(T &base, const T &cmp) -> T & { return (base = std::min(base, cmp)); }
#define never if constexpr(0)
const int inf = 0x3f3f3f3f;  const long long infLL = 0x3f3f3f3f3f3f3f3fLL; using ll = long long; using ull = unsigned long long;
const char endl = '\n';

#define __lambda_1(expr) [&](){return expr;}
#define __lambda_2(a, expr) [&](auto a){return expr;}
#define __lambda_3(a, b, expr) [&](auto a, auto b){return expr;}
#define __lambda_4(a, b, c, expr) [&](auto a, auto b, auto c){return expr;}
#define __lambda_overload(a, b, c, d, e, args...) __lambda_##e
#define lambda(...) __lambda_overload(__VA_ARGS__, 4, 3, 2, 1)(__VA_ARGS__)
#define lam lambda
namespace lib{
#if __cplusplus > 201703LL
namespace ranges = std::ranges;
namespace views = std::views;
#endif
}
using i16 = int16_t; using i32 = int32_t; using i64 = int64_t;
using u16 = uint16_t; using u32 = uint32_t; using u64 = uint64_t; using uz = size_t;
using f64 = double;

using namespace lib;

std::array<i32, 9> dx8 {  1,  1,  0, -1, -1, -1,  0,  1  };
std::array<i32, 9> dy8 {  0,  1,  1,  1,  0, -1, -1, -1  };

f64 constexpr pi =  3.141592653589793;

char const constexpr font[16][65][39] = {{
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "...............########...............",
    ".............############.............",
    "...........################...........",
    "..........##################..........",
    ".........####################.........",
    "........######################........",
    ".......########################.......",
    ".......##########....##########.......",
    "......#########........#########......",
    "......########..........########......",
    ".....#########..........#########.....",
    ".....########............########.....",
    ".....########............########.....",
    ".....########............########.....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    "....########..............########....",
    ".....########............########.....",
    ".....########............########.....",
    ".....########............########.....",
    ".....#########..........#########.....",
    "......########..........########......",
    "......#########........#########......",
    ".......##########....##########.......",
    ".......########################.......",
    "........######################........",
    ".........####################.........",
    "..........##################..........",
    "...........################...........",
    ".............############.............",
    "...............########...............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "...................####...............",
    ".................#######..............",
    "..............##########..............",
    "...........#############..............",
    "........################..............",
    ".......#################..............",
    ".......#################..............",
    ".......#################..............",
    ".......#################..............",
    "........######..########..............",
    "........###.....########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    "................########..............",
    ".......##########################.....",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    ".......##########################.....",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "..............#########...............",
    "...........##############.............",
    "........###################...........",
    ".......#####################..........",
    "......#######################.........",
    "......#######################.........",
    "......########################........",
    "......#########......#########........",
    "......#######.........#########.......",
    "......#######..........########.......",
    "......#######..........########.......",
    "......#######..........########.......",
    "......#######..........########.......",
    ".......######..........########.......",
    "......................#########.......",
    "......................########........",
    ".....................#########........",
    "....................##########........",
    "...................##########.........",
    "..................###########.........",
    ".................###########..........",
    "................###########...........",
    "...............###########............",
    "..............###########.............",
    ".............###########..............",
    "............###########...............",
    "...........###########.....#####......",
    "..........###########.....#######.....",
    ".........###########......#######.....",
    "........###########.......#######.....",
    ".......###########........#######.....",
    "......###########.........#######.....",
    ".....############################.....",
    ".....############################.....",
    ".....############################.....",
    ".....############################.....",
    ".....############################.....",
    "......###########################.....",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "..............##########..............",
    "..........################............",
    "........####################..........",
    ".......######################.........",
    ".......#######################........",
    ".......########################.......",
    ".......########################.......",
    ".......########.......##########......",
    ".......#######.........#########......",
    ".......#######..........########......",
    ".......#######..........########......",
    "........######..........########......",
    "........................########......",
    "........................########......",
    ".......................########.......",
    "......................#########.......",
    "...............###############........",
    "..............###############.........",
    "..............##############..........",
    "..............###############.........",
    "..............################........",
    "...............################.......",
    "......................##########......",
    "........................########......",
    "........................#########.....",
    ".........................########.....",
    ".........................########.....",
    ".........................########.....",
    ".........................########.....",
    "........................#########.....",
    ".......###.............##########.....",
    "......########........##########......",
    "......##########################......",
    "......#########################.......",
    ".....##########################.......",
    "......########################........",
    "......######################..........",
    ".........#################............",
    "............###########...............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    ".....................#####............",
    "....................#######...........",
    "...................########...........",
    "..................#########...........",
    ".................##########...........",
    "................###########...........",
    "................###########...........",
    "...............############...........",
    "..............#############...........",
    ".............##############...........",
    "............###############...........",
    "...........################...........",
    "...........########.#######...........",
    "..........########..#######...........",
    ".........########...#######...........",
    "........########....#######...........",
    ".......#########....#######...........",
    ".......########.....#######...........",
    "......########......#######...........",
    ".....########.......#######...........",
    "....##############################....",
    "....##############################....",
    "....##############################....",
    "....##############################....",
    "....##############################....",
    "....##############################....",
    "...................########...........",
    "...................########...........",
    "...................########...........",
    "...................########...........",
    "...................########...........",
    "...................########...........",
    ".............####################.....",
    "............#####################.....",
    "............#####################.....",
    "............#####################.....",
    "............#####################.....",
    ".............####################.....",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "........######################........",
    "........#######################.......",
    "........#######################.......",
    "........#######################.......",
    "........#######################.......",
    "........######################........",
    "........#######.......................",
    "........#######.......................",
    "........#######.......................",
    "........#######.......................",
    "........#######.......................",
    "........#######.......................",
    ".......########..########.............",
    ".......####################...........",
    ".......######################.........",
    ".......#######################........",
    ".......########################.......",
    ".......########################.......",
    ".......#########################......",
    ".......########.......##########......",
    "..........##...........#########......",
    "........................#########.....",
    ".........................########.....",
    ".........................########.....",
    ".........................########.....",
    ".........................########.....",
    ".........................########.....",
    ".........................########.....",
    "........#...............#########.....",
    ".......####............#########......",
    "......########.......###########......",
    "......##########################......",
    "......#########################.......",
    ".....#########################........",
    "......#######################.........",
    ".......#####################..........",
    ".........#################............",
    ".............##########...............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    ".........................######.......",
    "....................###########.......",
    ".................###############......",
    "...............#################......",
    ".............###################......",
    "............####################......",
    "...........####################.......",
    "..........################............",
    ".........############.................",
    "........###########...................",
    "........#########.....................",
    ".......#########......................",
    ".......########.......................",
    "......########........................",
    "......########........................",
    "......#######....########.............",
    "......#######..#############..........",
    ".....#########################........",
    ".....##########################.......",
    ".....###########################......",
    ".....###########################......",
    ".....############......##########.....",
    ".....##########.........#########.....",
    ".....#########...........#########....",
    ".....########.............########....",
    ".....########.............########....",
    ".....########.............########....",
    "......#######.............########....",
    "......#######.............########....",
    "......########...........#########....",
    "......#########.........#########.....",
    ".......##########.....###########.....",
    "........#########################.....",
    "........########################......",
    ".........######################.......",
    "..........####################........",
    "...........##################.........",
    ".............##############...........",
    "................########..............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......###########################.....",
    "......############################....",
    "......############################....",
    "......############################....",
    "......############################....",
    "......###########################.....",
    "......#######...........#########.....",
    "......#######...........#########.....",
    "......#######..........#########......",
    "......#######..........#########......",
    "......#######..........########.......",
    "......#######.........#########.......",
    "......#######.........########........",
    "......#######........#########........",
    ".......#####.........#########........",
    ".....................########.........",
    "....................#########.........",
    "....................########..........",
    "...................#########..........",
    "...................########...........",
    "..................#########...........",
    "..................#########...........",
    "..................########............",
    ".................#########............",
    ".................########.............",
    "................#########.............",
    "................########..............",
    "................########..............",
    "...............########...............",
    "...............########...............",
    "..............#########...............",
    "..............########................",
    "..............########................",
    ".............########.................",
    ".............########.................",
    ".............#######..................",
    ".............#######..................",
    "...............#####..................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "...............#########..............",
    ".............#############............",
    "...........#################..........",
    "..........###################.........",
    ".........#####################........",
    "........#######################.......",
    "........#######################.......",
    "........#########.....#########.......",
    ".......#########.......#########......",
    ".......########.........########......",
    ".......########.........########......",
    ".......########.........########......",
    ".......########.........########......",
    ".......########.........########......",
    "........########.......########.......",
    "........#########.....#########.......",
    ".........#####################........",
    "..........###################.........",
    "...........#################..........",
    "...........#################..........",
    ".........#####################........",
    "........#######################.......",
    ".......#########......##########......",
    "......########..........########......",
    "......########..........#########.....",
    ".....########............########.....",
    ".....########............########.....",
    ".....########............########.....",
    ".....########............########.....",
    ".....#########..........#########.....",
    ".....#########..........#########.....",
    "......##########......##########......",
    "......##########################......",
    ".......########################.......",
    ".......########################.......",
    "........######################........",
    ".........####################.........",
    "...........################...........",
    "..............##########..............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "..............#########...............",
    "............#############.............",
    "..........#################...........",
    ".........###################..........",
    "........#####################.........",
    ".......#######################........",
    "......########################........",
    "......##########......#########.......",
    "......#########........#########......",
    ".....#########..........########......",
    ".....########............#######......",
    ".....########............#######......",
    ".....########............########.....",
    ".....########............########.....",
    ".....########............########.....",
    ".....#########..........#########.....",
    "......########.........##########.....",
    "......##########......###########.....",
    ".......##########################.....",
    ".......##########################.....",
    "........#########################.....",
    ".........########################.....",
    "...........############..########.....",
    ".............########....#######......",
    ".........................#######......",
    "........................########......",
    "........................########......",
    ".......................########.......",
    "......................#########.......",
    "....................##########........",
    "..................############........",
    "..............###############.........",
    ".........###################..........",
    "........###################...........",
    "........##################............",
    "........################..............",
    "........##############................",
    "........############..................",
    ".........######.......................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    ".......................####...........",
    "......................######..........",
    "....................########..........",
    "...................##########.........",
    "..................###########.........",
    ".................############.........",
    "................############..........",
    "...............###########............",
    "..............###########.............",
    ".............###########..............",
    ".............##########...............",
    "............##########................",
    "............#########.................",
    "...........#########..................",
    "...........########...................",
    "..........#########...................",
    "..........########....................",
    ".........#########....................",
    ".........########.....................",
    ".........########.....................",
    ".........########.....................",
    "........#########.....................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    "........########......................",
    ".........########.....................",
    ".........########.....................",
    ".........########.....................",
    ".........#########....................",
    "..........########....................",
    "..........#########...................",
    "..........#########...................",
    "...........#########..................",
    "...........##########.................",
    "............#########.................",
    ".............#########................",
    ".............##########...............",
    "..............###########.............",
    "...............###########............",
    "................###########...........",
    ".................############.........",
    "..................###########.........",
    "...................##########.........",
    "....................#########.........",
    ".....................#######..........",
    ".......................####...........",
    ".........................#............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "...........####.......................",
    "..........######......................",
    ".........#########....................",
    ".........##########...................",
    ".........###########..................",
    ".........############.................",
    "..........############................",
    "............###########...............",
    ".............###########..............",
    "..............##########..............",
    "...............##########.............",
    "................##########............",
    ".................#########............",
    "..................#########...........",
    "...................########...........",
    "...................#########..........",
    "....................########..........",
    "....................#########.........",
    ".....................########.........",
    ".....................########.........",
    ".....................########.........",
    ".....................#########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    "......................########........",
    ".....................########.........",
    ".....................########.........",
    ".....................########.........",
    "....................#########.........",
    "....................########..........",
    "...................#########..........",
    "...................#########..........",
    "..................#########...........",
    ".................##########...........",
    "................##########............",
    "................#########.............",
    "..............###########.............",
    ".............###########..............",
    "............###########...............",
    "...........###########................",
    ".........############.................",
    ".........###########..................",
    ".........##########...................",
    ".........#########....................",
    "..........#######.....................",
    "...........####.......................",
    "............#.........................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    ".................#####................",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    "......###########################.....",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    "................#######...............",
    ".................#####................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......##########################......",
    ".....############################.....",
    ".....############################.....",
    ".....############################.....",
    ".....############################.....",
    ".....############################.....",
    "......###########################.....",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    ".................####.................",
    "................######................",
    "................#######...............",
    "...............########...............",
    "...............########...............",
    "................#######...............",
    "................######................",
    ".......#####....######.....####.......",
    ".......######...######...#######......",
    "......#########..#####.#########......",
    "......###############.##########......",
    "......##########################......",
    "......##########################......",
    ".......########################.......",
    "............##############............",
    "...............########...............",
    "..............###########.............",
    ".............#############............",
    "...........########.#######...........",
    "..........########..########..........",
    "..........########..#########.........",
    ".........########....########.........",
    ".........########....########.........",
    "..........#######.....#######.........",
    "...........#####......######..........",
    "............###.........##............",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
    },
    {
    "......................................",
    "......................................",
    "......................................",
    "...........................####.......",
    "...........................######.....",
    "..........................#######.....",
    "..........................#######.....",
    ".........................########.....",
    ".........................#######......",
    "........................########......",
    "........................#######.......",
    ".......................########.......",
    ".......................#######........",
    "......................########........",
    "......................#######.........",
    ".....................########.........",
    ".....................########.........",
    ".....................#######..........",
    "....................########..........",
    "....................#######...........",
    "...................########...........",
    "...................#######............",
    "..................########............",
    "..................#######.............",
    ".................########.............",
    ".................#######..............",
    "................########..............",
    "................#######...............",
    "...............########...............",
    "...............#######................",
    "...............#######................",
    "..............########................",
    "..............#######.................",
    ".............########.................",
    ".............#######..................",
    "............########..................",
    "............#######...................",
    "...........########...................",
    "...........#######....................",
    "..........########....................",
    "..........#######.....................",
    ".........########.....................",
    ".........#######......................",
    "........########......................",
    "........########......................",
    "........#######.......................",
    ".......########.......................",
    ".......#######........................",
    "......########........................",
    "......#######.........................",
    ".....########.........................",
    ".....#######..........................",
    "......######..........................",
    ".......#####..........................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................",
    "......................................"
}};

namespace Solution_5849927751344851 {
    char constexpr black = '#';
    char constexpr white = '.';
    /**
     * 描述一个二维黑白图像。
     */
    class Image {
    public:
        i32 width = 0, height = 0;
        std::vector<std::vector<char>> pixels;  // true / false

        Image(i32 width = 0, i32 height = 0) : width(width), height(height), pixels(height, std::vector<char>(width, false)) {}
        Image(std::vector<std::string> const &s) {
            height = s.size();
            width = ranges::max(s | views::transform(lam(x, x.size())));

            pixels.resize(height);
            for (i32 i = 0; i < height; i++) {
                pixels[i].resize(width);
                for (i32 j = 0; j < static_cast<i32>(s[i].size()); j++) {
                    pixels[i][j] = s[i][j] == black;
                }
            }
        }
        Image(std::vector<std::vector<char>> const &pixels) : pixels(pixels) {
            height = pixels.size();
            width = height == 0? 0: pixels[0].size();
        }

        auto reduceNoise() const -> Image;
        auto split() const -> std::vector<Image>;
        auto cutRows() const -> Image;
        auto cutColumns() const -> Image;
        auto stretch(f64, f64) const -> Image;
        auto rotate(f64) const -> Image;
        auto match(Image const &image) const -> f64;

        auto operator[] (uz index) -> std::vector<char> & { return pixels[index]; }
        auto operator[] (uz index) const -> std::vector<char> const & { return pixels[index]; }
        auto friend operator<< (std::ostream &os, Image const &image) -> std::ostream & {
            for (auto const &line: image.pixels) {
                for (auto const &pixel: line) {
                    os << (pixel? black: white);
                }
                os << endl;
            }
            return os;
        }
        auto string() const -> std::string {
            std::stringstream ss;
            ss << *this;
            return ss.str();
        }
    };

    /**
     * 对图像降噪。
     */
    auto Image::reduceNoise() const -> Image {
        std::vector new_img(height, std::vector<char>(width, false));
        for (i32 i = 0; i < height; i++) {
            for (i32 j = 0; j < width; j++) {
                // 采取一个较为简单的策略：周围的黑点不少于 4 个就认为是黑色。

                std::array<i32, 2> cnts;  cnts.fill(0);
                for (i32 k = 0; k < 8; k++) {
                    auto x = i + dx8[k], y = j + dy8[k];
                    if (0 <= x and x < height and 0 <= y and y < width) {
                        cnts[pixels[x][y]]++;
                    }
                }
                cnts[pixels[i][j]]++;
                new_img[i][j] = cnts[1] >= 4;
            }
        }

        // 去除过小的黑色或白色联通块
        auto walk = [&](i32 x, i32 y, auto &vis) -> std::vector<std::pair<i32, i32>> {
            bool color = new_img[x][y];

            std::deque<std::pair<i32, i32>> q;
            std::vector<std::pair<i32, i32>> res;
            q.push_back({x, y});
            while (not q.empty()) {
                auto [x, y] = q.front();  q.pop_front();
                if (vis[x][y])  continue;
                vis[x][y] = true;
                res.push_back({x, y});

                for (i32 k = 0; k < 8; k++) {
                    auto nx = x + dx8[k], ny = y + dy8[k];
                    if (0 <= nx and nx < height and 0 <= ny and ny < width and new_img[nx][ny] == color) {
                        q.push_back({nx, ny});
                    }
                }
            }
            return res;
        };

        auto res_pixels = new_img;
        i32 constexpr maxIgnoreSize = 6;  // 忽略小于等于多少个点的联通块
        std::vector vis(height, std::vector<char>(width));
        for (i32 i = 0; i < height; i++) {
            for (i32 j = 0; j < width; j++) {
                if (not vis[i][j]) {
                    auto block = walk(i, j, vis);
                    if (block.size() < maxIgnoreSize) {
                        for (auto [x, y]: block) {
                            res_pixels[x][y] = not res_pixels[x][y];
                        }
                    }
                }
            }
        }
        
        return Image{res_pixels};
    }

    /**
     * 分割图像。
     * 要求字符之间有一定宽度的几列接近纯白。
     */
    auto Image::split() const -> std::vector<Image> {
        std::vector<Image> res;

        std::vector columns(width, std::vector<char>(height));
        for (i32 i = 0; i < width; i++) {
            for (i32 j = 0; j < height; j++) {
                columns[i][j] = pixels[j][i];
            }
        }

        std::vector<char> is_white(width);  // 每一列是否为纯白
        for (i32 i = 0; i < width; i++) {
            auto cnt = ranges::count(columns[i], true);
            if (cnt * 15 < height)  is_white[i] = true;
        }

        i32 constexpr split_width = 4;  // 至少需要多少列空白
        i32 constexpr block_min_width = 8;  // 最少需要多少列才能成块
        i32 i = 0;  // 从这一列开始不是空白列
        while (i < width) {
            while (i < width and is_white[i])  i++;
            if (i >= width)  break;

            auto next = std::distance(is_white.begin(), std::search_n(is_white.begin() + i, is_white.end(), split_width, true));
            
            if (next - i >= block_min_width) {
                std::vector rows(height, std::vector<char>(next - i));
                for (i32 j = 0; j < height; j++) {
                    for (i32 k = 0; k < next - i; k++) {
                        rows[j][k] = columns[i + k][j];
                    }
                }
                res.push_back(Image{rows});
            }
            
            if (next == width)  break;
            i = next + split_width;
        }

        return res;
    }

    /**
     * 去除上下的空行
     */
    auto Image::cutRows() const -> Image {
        auto is_white = [&](std::vector<char> const &line) -> bool {
            auto cnt = ranges::count(line, true);
            return cnt * 15 < width;
        };

        i32 i = 0, j = height - 1;
        while (i < height and is_white(pixels[i]))  i++;
        while (j >= i and is_white(pixels[j]))  j--;

        std::vector tmp(pixels.begin() + i, pixels.begin() + j + 1);
        return Image{tmp};
    }
    /**
     * 去除左右的空列
     */
    auto Image::cutColumns() const -> Image {
        std::vector tmp(width, std::vector<char>(height));
        for (i32 i = 0; i < height; i++) {
            for (i32 j = 0; j < width; j++) {
                tmp[j][i] = pixels[i][j];
            }
        }
        auto cutted = Image{tmp}.cutRows();
        std::vector res(cutted.width, std::vector<char>(cutted.height));
        for (i32 i = 0; i < cutted.height; i++) {
            for (i32 j = 0; j < cutted.width; j++) {
                res[j][i] = cutted.pixels[i][j];
            }
        }
        return Image{res};
    }

    /**
     * 拉伸一个图像
     */
    auto Image::stretch(f64 rows_scale, f64 columns_scale) const -> Image {
        auto new_height = static_cast<i32>(std::round(height * rows_scale));
        auto new_width = static_cast<i32>(std::round(width * columns_scale));
        std::vector new_pixels(new_height, std::vector<char>(new_width));

        f64 inv_rows_scale = 1.0 / rows_scale;
        f64 inv_columns_scale = 1.0 / columns_scale;  // 预处理倒数，减少除法次数
        for (i32 i = 0; i < new_height; i++) {
            for (i32 j = 0; j < new_width; j++) {
                f64 x0 = i * inv_rows_scale, y0 = j * inv_columns_scale;
                f64 x1 = x0 + inv_rows_scale, y1 = y0 + inv_columns_scale;

                f64 area = 0;  // 计算黑色的面积
                for (i32 x = x0; x <= x1; x++) {
                    for (i32 y = y0; y <= y1; y++) {
                        if (0 <= x and x < height and 0 <= y and y < width and pixels[x][y]) {
                            auto left = std::max<f64>(y, y0);
                            auto right = std::min<f64>(y + 1, y1);
                            auto top = std::max<f64>(x, x0);
                            auto bottom = std::min<f64>(x + 1, x1);
                            area += (right - left) * (bottom - top);
                        }

                    }
                }
                new_pixels[i][j] = area * 2 > (inv_rows_scale * inv_columns_scale);
            }
        }
        return Image{new_pixels};
    }

    /**
     * 将图像逆时针旋转若干弧度
     */
    auto Image::rotate(f64 rad) const -> Image {
        rad = -rad;
        f64 mid_r = height / 2.0, mid_c = width / 2.0;
        f64 cos_r = std::cos(rad), sin_r = std::sin(rad);
        std::vector new_pixels(height, std::vector<char>(width));
        for (i32 i = 0; i < height; i++) {
            for (i32 j = 0; j < width; j++) {
                // 逆时针旋转一定角度
                f64 dx = i - mid_r, dy = j - mid_c;
                f64 len = std::hypot(dx, dy);
                f64 cos_cur = dx / len, sin_cur = dy / len;

                f64 new_cos = cos_cur * cos_r - sin_cur * sin_r;
                f64 new_sin = sin_cur * cos_r + cos_cur * sin_r;
                f64 new_x = mid_r + new_cos * len;
                f64 new_y = mid_c + new_sin * len;

                f64 area = 0;
                for (i32 x = new_x; x <= new_x + 1; x++) {
                    for (i32 y = new_y; y <= new_y + 1; y++) {
                        if (0 <= x and x < height and 0 <= y and y < width and pixels[x][y]) {
                            auto left = std::max<f64>(y, new_y);
                            auto right = std::min<f64>(y + 1, new_y + 1);
                            auto top = std::max<f64>(x, new_x);
                            auto bottom = std::min<f64>(x + 1, new_x + 1);
                            area += (right - left) * (bottom - top);
                        }
                    }
                }
                new_pixels[i][j] = area * 2 > 1;
            }
        }
        return Image{new_pixels};
    }
    /**
     * 计算与另一个图像的相似程度。
     * 
     * 采取一个较为简陋的模型。
     * 1. 把两个图片的空白裁去。
     * 2. 尝试改变两个图像的缩放，让宽高比相同。计算缩放比率，如果这个比率小于 0.7 则给予惩罚。
     * 3. 从 -pi/12 到 pi/12 尝试旋转数字，计算 1 倍、0.5 倍、0.25 倍缩放下匹配的像素数量之和。
     */
    auto Image::match(Image const &other_) const -> f64 {
        auto self = cutRows().cutColumns();
        auto other = other_.cutRows().cutColumns();

        auto rows_scale = static_cast<f64>(self.height) / other.height;
        auto columns_scale = static_cast<f64>(self.width) / other.width;

        f64 score = 1;
        f64 scale_punish_limit = 0.5;
        if (auto tmp = rows_scale / columns_scale; tmp < scale_punish_limit or tmp > 1 / scale_punish_limit) {
            if (tmp > 1)  tmp = 1 / tmp;
            score *= std::sqrt(tmp);  // 乘以 tmp 的根号作为惩罚
        }

        self = self.stretch(1 / rows_scale, 1 / columns_scale);
        auto match_normalized = [&](Image const &a, Image const &b) -> f64 {
            auto height = std::min(a.height, b.height);
            auto width = std::min(a.width, b.width);

            if (height == 0 or width == 0)  return 0;

            i32 same = 0;
            for (i32 i = 0; i < height; i++) {
                for (i32 j = 0; j < width; j++) {
                    if (a.pixels[i][j] == b.pixels[i][j])  same++;
                }
            }

            // std::cout << a << "\ncmp with\n" << b << "\n ans = " << same * 100 / (height * width) << "\n";
            return same * 100 / (height * width);
        };

        auto rad = -pi / 6;
        f64 ans = 0;
        for (i32 i = 0; i <= 6; i++, rad += pi / 18) {
            f64 cur = 0;
            auto self_rot = self.rotate(rad);
            cur += match_normalized(self_rot, other);
            cur += match_normalized(self_rot.stretch(0.5, 0.5), other.stretch(0.5, 0.5));
            // cur += match_normalized(self_rot.stretch(0.25, 0.25), other.stretch(0.25, 0.25));
            chkMax(ans, cur);
        }

        std::cout << self.stretch(0.25, 0.25) << endl << "match" << other.stretch(0.25, 0.25) << " = " << ans << " * " << score << endl;
        std::cout << "rows_scale = " << rows_scale << ", columns_scale = " << columns_scale << endl;
        return ans * score;
    }

    void solve() {
        std::freopen("1.in", "r", stdin);
        std::freopen("1.out", "w", stdout);

        auto expr = [&]() -> std::string {
            std::vector<std::string> lines;
            std::string line;
            while (std::getline(std::cin, line)) {
                lines.push_back(line);
            }

            std::vector<Image> chs;
            for (auto &ch: font) {
                std::vector<std::string> vec_str;
                for (auto &line: ch) {
                    vec_str.push_back(line);
                }
                chs.push_back(Image{vec_str});
            }

            auto chars = Image{lines}.reduceNoise().cutColumns().cutRows().split();

            std::string s;
            for (auto const &ch_img: chars) {
                std::cout << ch_img << endl;
                std::pair best{0, 0};
                for (i32 i = 0; i < static_cast<i32>(chs.size()); i++) {
                    auto cur = ch_img.match(chs[i]);
                    chkMax(best, {cur, i});
                }
                s += "0123456789()+-*/"[best.second];
            }
            return s;
        }();
        std::cout << expr << std::endl;
    }
}

int main(int argc, char const *argv[]) {
    DEBUG_MODE = (argc-1) and not strcmp("-d", argv[1]);
    Solution_5849927751344851::solve();
    return 0;
}
