// 1.cpp
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

int main() {
    int N;
    cin >> N;

    if (N < 2) {
        return 0;
    }

    vector<bool> is_prime(N + 1, true);
    is_prime[0] = is_prime[1] = false;

    for (int i = 2; i * i <= N; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= N; j += i) {
                is_prime[j] = false;
            }
        }
    }

    vector<int> primes;
    for (int i = 2; i <= N; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }

    for (size_t i = 0; i < primes.size(); ++i) {
        if (i > 0) {
            cout << " ";
        }
        cout << primes[i];
    }
    cout << endl;

    return 0;
}

// 2.cpp
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

int n,q,cnt;
bitset<100000001> pr;
int prime[6000000];

void get(){
    pr[0]=pr[1]=true;
    for (int i=3;i*i<=n;i+=2){
        if (not pr[i]){
            for (int j=i*i,k=i<<1;j<=n;j+=k) pr[j]=true;
        }
    }
    prime[++cnt]=2;
    for (int i=3;i<=n;i+=2) if (not pr[i]) prime[++cnt]=i;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin>>n>>q;
    get();
    for (int i=1;i<=cnt;i++) cout<<prime[i]<<" ";
    return 0;
}

// 3.cpp
#include <iostream>
#include <vector>

std::vector<int> linear_sieve(int limit) {
    std::vector<int> primes;
    std::vector<bool> is_prime(limit + 1, true);
    is_prime[0] = is_prime[1] = false;

    for (int i = 2; i <= limit; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
        for (int prime : primes) {
            if (prime * i > limit) {
                break;
            }
            is_prime[prime * i] = false;
            if (i % prime == 0) {
                break;
            }
        }
    }
    return primes;
}

int main() {
    int limit;
    std::cin >> limit;
    std::vector<int> primes = linear_sieve(limit);

    for (int prime : primes) {
        std::cout << prime << " ";
    }
    std::cout << std::endl;

    return 0;
}

// 4.cpp
#include <bits/stdc++.h>

class PrimeManager {
public:
    int N = 0;
    std::vector<int> primes;
    std::vector<char> notPrime;

    PrimeManager(int N): N(N), primes(), notPrime(N+1) {
        notPrime[0] = notPrime[1] = true;
        for (auto p = 2; p <= N; p++) {
            if (not notPrime[p])  primes.push_back(p);
            for (auto q: primes) {
                if (q * p > N)  break;
                notPrime[q * p] = true;
                if (p % q == 0)  break;
            }
        }
    }
};

namespace Solution {
    auto solve() -> void {
        int N;  std::cin >> N;
        PrimeManager pm{N};

        for (auto x: pm.primes) {
            std::cout << x << " ";
        }
        std::cout << "\n";
    }
}

int main() {
    Solution::solve();
    return 0;
}

// 5.cpp
#include<bits/stdc++.h>
using namespace std;
bool isPrime[100000010];
int Prime[6000010] , cnt = 0 , n , q;
void solve()
{
    memset(isPrime , 1 , sizeof(isPrime));
    isPrime[1] = 0;
    for(int i = 2 ; i <= n ; i ++)
    {
        if(isPrime[i]) Prime[++ cnt] = i;
        for(int j = 1 ; j <= cnt && i * Prime[j] <= n ; j ++) 
        {
            isPrime[i * Prime[j]] = 0;
            if(i % Prime[j] == 0) break;
        }
    }
}
int main()
{
    scanf("%d" , &n);
    solve();
    for(int i = 1 ; i <= cnt ; i ++) printf("%d ",Prime[i]);
    return 0;
}

上述的 5 份代码中，有 2 份由 AI 编写，剩下的 3 份为 OI 选手编写。
我希望用来找出使用 AI 进行作弊的人。请找出那两份 AI 编写的代码。请务必仔细思考，这对我非常重要。
